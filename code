/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package playfairalgo;

import java.awt.Point;


/**
 *
 * @author mohammed
 */
public class playfair extends javax.swing.JFrame {

    /**
     * Creates new form playfair
     */
    public playfair() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        encryptBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        plaintext = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        ciphertext = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        keywordfield = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        clearbtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "play fair", "ceaser cipher", "Item 3", "Item 4" }));

        encryptBtn.setText("encrypt");
        encryptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptBtnActionPerformed(evt);
            }
        });

        plaintext.setColumns(20);
        plaintext.setRows(5);
        jScrollPane1.setViewportView(plaintext);

        ciphertext.setColumns(20);
        ciphertext.setRows(5);
        jScrollPane2.setViewportView(ciphertext);

        jLabel1.setText("security technique ");

        jLabel2.setText("key");

        clearbtn.setText("clear");
        clearbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearbtnActionPerformed(evt);
            }
        });
                        

    private void encryptBtnActionPerformed(java.awt.event.ActionEvent evt) {                                           
        Playfair pf = new Playfair();
        String text = plaintext.getText();
        String key  = keywordfield.getText();
        
        ciphertext.append(pf.Playfairr(key,text) + "\n");
    }                                          

    private void clearbtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
        plaintext.setText("");
        ciphertext.setText("");
        keywordfield.setText("");
    }                                        

    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new playfair().setVisible(true);
                
            }
        });
    }

public class Playfair{
  // length of digraph array
  private int length = 0;
  
  // table for Playfair cipher
  private String [][] matrix;
  
  
 
  
  // main run of the program, Playfair method
  public String Playfairr(String sc,String input){
  
    // prompts user for the keyword to use for encoding & creates matrix
    //System.out.println("Please input the keyword for the Playfair cipher.");
    
    String keyword = parseString(sc);
    while(keyword.equals(""))
      keyword = parseString(sc);
    matrix = this.ciphermatrix(keyword);
    
    // prompts user for message to be encoded
    input = parseString(input);
    while(input.equals(""))
      input = parseString(sc);
    
    // encodes the message
    return cipher(input);
    
  }
  
  // parses any input string to remove numbers, punctuation,
  // replaces any J's with I's, and makes string all caps
  private String parseString(String s){
    String parse = s;
    parse = parse.toUpperCase();
    parse = parse.replaceAll("[^A-Z]", "");
    parse = parse.replace("J", "I");
    return parse;
  }
  
  // creates the cipher MARIX based on some input string (already parsed)
  private String[][] ciphermatrix(String key){
    String[][] playfairmatrix = new String[5][5];
    String keyString = key + "ABCDEFGHIKLMNOPQRSTUVWXYZ";
    
    // fill string array with empty string
    for(int i = 0; i < 5; i++)
      for(int j = 0; j < 5; j++)
        playfairmatrix[i][j] = "";
    
    for(int k = 0; k < keyString.length(); k++){
      boolean repeat = false;
      boolean used = false;
      for(int i = 0; i < 5; i++){
        for(int j = 0; j < 5; j++){
          if(playfairmatrix[i][j].equals("" + keyString.charAt(k))){
            repeat = true;
          }else if(playfairmatrix[i][j].equals("") && !repeat && !used){
            playfairmatrix[i][j] = "" + keyString.charAt(k);
            used = true;
          }
        }
      }
    }
    return playfairmatrix;
  }
  
  // cipher: takes input (all upper-case), encodes it, and returns output
  private String cipher(String in){
    length = (int) in.length() / 2 + in.length() % 2;
    
    // insert x between double-letter digraphs & redefines "length"
    for(int i = 0; i < (length - 1); i++){
      if(in.charAt(2 * i) == in.charAt(2 * i + 1)){
        in = new StringBuffer(in).insert(2 * i + 1, 'X').toString();
        length = (int) in.length() / 2 + in.length() % 2;
      }
    }
    
    // adds an x to the last digraph, if necessary
    String[] plainText = new String[length];
    for(int j = 0; j < length ; j++){
      if(j == (length - 1) && in.length() %2 != 0){//2 == (length - 1)
        in = in + "X";
      plainText[j] = in.charAt(2 * j) +""+ in.charAt(2 * j + 1);
    }
    
    // encodes the digraphs and returns the output
    String out = "";
    String[] encDigraphs = new String[length];
    encDigraphs = encodeDigraph(plainText);
    for(int k = 0; k < length; k++)
      out = out + encDigraphs[k];
    return out;
  }
  
  // encodes the digraph input with the cipher's specifications
  
private String[] encodeDigraph(String di[]){
    String[] enc = new String[length];
    for(int i = 0; i < length; i++){
      char a = di[i].charAt(0);
      char b = di[i].charAt(1);
      int r1 = (int) getPoint(a).getX();
      int r2 = (int) getPoint(b).getX();
      int c1 = (int) getPoint(a).getY();
      int c2 = (int) getPoint(b).getY();
      
      // case 1: letters in digraph are of same row, shift columns to right
      if(r1 == r2){
        c1 = (c1 + 1) % 5;
        c2 = (c2 + 1) % 5;
        
      // case 2: letters in digraph are of same column, shift rows down
      }else if(c1 == c2){
        r1 = (r1 + 1) % 5;
        r2 = (r2 + 1) % 5;
      
      // case 3: letters in digraph form rectangle, swap first column # with second column #
      }else{
        int temp = c1;
        c1 = c2;
        c2 = temp;
      }
      
      //performs the table look-up and puts those values into the encoded array
      enc[i] = matrix[r1][c1] + "" + matrix[r2][c2];
    }
    return enc;
  }
  
  // returns a point containing the row and column of the letter
  private Point getPoint(char c){
    Point pt = new Point(0,0);
    for(int i = 0; i < 5; i++)
      for(int j = 0; j < 5; j++)
        if(c == matrix[i][j].charAt(0))
          pt = new Point(i,j);
    return pt;
  }
    }
    
    // Variables declaration - do not modify                     
    private javax.swing.JTextArea ciphertext;
    private javax.swing.JButton clearbtn;
    private javax.swing.JButton encryptBtn;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField keywordfield;
    private javax.swing.JTextArea plaintext;
    // End of variables declaration                   
}





